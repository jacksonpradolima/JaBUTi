/* Generated By:JavaCC: Do not edit this line. ASMParseTokenManager.java */
package br.jabuti.instrumenter;
import org.aspectj.apache.bcel.classfile.*;
import org.aspectj.apache.bcel.generic.*;
import org.aspectj.apache.bcel.*;
import java.util.*;
import java.io.*;
import br.jabuti.util.*;

/** Token Manager. */
public class ASMParseTokenManager implements ASMParseConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffc0000000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x1ffffffL) != 0L)
         {
            jjmatchedKind = 220;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffffffc0000000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x1ffffffL) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active0 & 0x3800000000000000L) != 0L || (active1 & 0x1f800003fe000L) != 0L || (active2 & 0x20e01f0010000000L) != 0L || (active3 & 0x63e00L) != 0L)
            return 10;
         if ((active0 & 0xc7ffffffc0000000L) != 0L || (active1 & 0xfffe07ffffc01fffL) != 0L || (active2 & 0xdf1fe0ffefffffffL) != 0L || (active3 & 0x1f9c1ffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 2;
            }
            return 10;
         }
         return -1;
      case 3:
         if ((active0 & 0x4000001000000000L) != 0L || (active1 & 0x200a064e80471740L) != 0L || (active2 & 0x4d02a0a1a0604fc0L) != 0L || (active3 & 0x140602bL) != 0L)
            return 10;
         if ((active0 & 0x87ffffefc0000000L) != 0L || (active1 & 0xdff401b17f80c8bfL) != 0L || (active2 & 0x92dd425e4f9fb03fL) != 0L || (active3 & 0xbd85d4L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 3;
            }
            return 10;
         }
         return -1;
      case 4:
         if ((active0 & 0xf00c0000000L) != 0L || (active1 & 0x106000086L) != 0L || (active2 & 0x240024000078000L) != 0L || (active3 & 0x10L) != 0L)
            return 10;
         if ((active0 & 0x87fff0ef00000000L) != 0L || (active1 & 0xdff405b07986c839L) != 0L || (active2 & 0x909d401e4f98303fL) != 0L || (active3 & 0xbd85c4L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 4;
            }
            return 10;
         }
         return -1;
      case 5:
         if ((active0 & 0x815f802400000000L) != 0L || (active1 & 0x1fe404207880c038L) != 0L || (active2 & 0x9c401e00002000L) != 0L || (active3 & 0x2c0004L) != 0L)
            return 10;
         if ((active0 & 0x6a07ecb00000000L) != 0L || (active1 & 0xc010019001060801L) != 0L || (active2 & 0x900100004f9f103fL) != 0L || (active3 & 0x9185c0L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 5;
            }
            return 10;
         }
         return -1;
      case 6:
         if ((active0 & 0x2202e4900000000L) != 0L || (active1 & 0x10001001060801L) != 0L || (active2 & 0x8001000040070000L) != 0L || (active3 & 0x100000L) != 0L)
            return 10;
         if ((active0 & 0x487508200000000L) != 0L || (active1 & 0xdfc0018070000030L) != 0L || (active2 & 0x1018001c0f98103fL) != 0L || (active3 & 0x8185c0L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 6;
            return 10;
         }
         return -1;
      case 7:
         if ((active0 & 0x7000000000000L) != 0L || (active1 & 0xfc0008070000030L) != 0L || (active2 & 0x18001c00180000L) != 0L || (active3 & 0x8400L) != 0L)
            return 10;
         if ((active0 & 0x480508200000000L) != 0L || (active1 & 0xd000010000000000L) != 0L || (active2 & 0x100000000f80103fL) != 0L || (active3 & 0x8101c0L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 7;
            return 10;
         }
         return -1;
      case 8:
         if ((active0 & 0x400100200000000L) != 0L || (active1 & 0xd000010000000000L) != 0L || (active2 & 0x103fL) != 0L || (active3 & 0x10000L) != 0L)
            return 10;
         if ((active0 & 0x80408000000000L) != 0L || (active2 & 0x100000000f800000L) != 0L || (active3 & 0x8001c0L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 8;
            return 10;
         }
         return -1;
      case 9:
         if ((active0 & 0x80000000000000L) != 0L || (active2 & 0x800000L) != 0L)
            return 10;
         if ((active0 & 0x408000000000L) != 0L || (active2 & 0x100000000f000000L) != 0L || (active3 & 0x8001c0L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 9;
            return 10;
         }
         return -1;
      case 10:
         if ((active2 & 0x100000000f000000L) != 0L || (active3 & 0x140L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 10;
            return 10;
         }
         if ((active0 & 0x408000000000L) != 0L || (active3 & 0x800080L) != 0L)
            return 10;
         return -1;
      case 11:
         if ((active2 & 0x1000000004000000L) != 0L || (active3 & 0x40L) != 0L)
            return 10;
         if ((active2 & 0xb000000L) != 0L || (active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 11;
            return 10;
         }
         return -1;
      case 12:
         if ((active2 & 0xa000000L) != 0L)
            return 10;
         if ((active2 & 0x1000000L) != 0L || (active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 12;
            return 10;
         }
         return -1;
      case 13:
         if ((active3 & 0x100L) != 0L)
            return 10;
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 13;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x0L, 0x0L);
      case 37:
         return jjStopAtPos(0, 28);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 42:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L, 0x0L);
      case 43:
         return jjStopAtPos(0, 24);
      case 44:
         return jjStopAtPos(0, 13);
      case 45:
         return jjStopAtPos(0, 25);
      case 46:
         return jjStopAtPos(0, 14);
      case 47:
         return jjStopAtPos(0, 27);
      case 58:
         return jjStopAtPos(0, 19);
      case 59:
         return jjStopAtPos(0, 12);
      case 60:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 18);
      case 91:
         return jjStopAtPos(0, 10);
      case 93:
         return jjStopAtPos(0, 11);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xfffe000000000L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xf0000000000000L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x700001000000000L, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xf800000800000000L, 0x7ffffL, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x7ffff80000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x78000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfffff80000000000L, 0xffffffffffL, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x30000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0xfffffc0000000000L, 0x3fL);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1c0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xe00L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x700000000L, 0x0L, 0x0L, 0x1f000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x60000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x780000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000L);
      case 123:
         return jjStopAtPos(0, 8);
      case 125:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 50:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800000000000000L, active1, 0x1f80000380000L, active2, 0x1c0000000000L, active3, 0L);
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xc330007000000000L, active1, 0x1e000001c00001L, active2, 0x1e00000000000L, active3, 0x980000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x1fe000007e00003eL, active2, 0x1e000000000000L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000080000040L, active2, 0x1e0000000000000L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x18000000000L, active2, 0L, active3, 0x60600L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x3fffL, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000040000000L, active1, 0L, active2, 0x4000L, active3, 0x1200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xf0000000000L, active1, 0x100000080L, active2, 0x200000000078000L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000100L, active2, 0x400000000380000L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x400000200L, active2, 0x80000000fc00000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x60000000000L, active2, 0x3000000010000000L, active3, 0x38c0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80600300000000L, active1, 0x1800000c00L, active2, 0xc000000060000000L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x7800000000000L, active1, 0x6000001000L, active2, 0x33f80000000L, active3, 0xfL);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x7e000L, active2, 0x4000000000L, active3, 0x1c110L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x3fL, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L);
      case 66:
      case 98:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0x800000L);
      case 67:
      case 99:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 108, 10);
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L, active2, 0xc0000000000000L, active3, 0L);
      case 68:
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 10);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 10);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 170, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x2000000400000L, active2, 0x200000000000L, active3, 0x1000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x480300040000000L, active1, 0x1c00000e00L, active2, 0xc800000060400040L, active3, 0L);
      case 70:
      case 102:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 10);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 110, 10);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 171, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x180L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0x180000000L, active3, 0x3L);
      case 73:
      case 105:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 10);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 10);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 172, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x2000000080000040L, active2, 0x100000000000000L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 10);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 10);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0x8110002000000000L, active1, 0x4000000800000L, active2, 0x400000000600L, active3, 0x80100L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6000006L, active2, 0x2000000000000L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0x800000007800L, active3, 0xc0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xf8200000000L, active1, 0x1fe00001780000b8L, active2, 0x121c008000078000L, active3, 0x20L);
      case 80:
      case 112:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 203, 10);
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x7c000L, active2, 0x180000L, active3, 0x202000L);
      case 82:
      case 114:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 156, 10);
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 189, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L, active2, 0x20000000000L, active3, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 112, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0x220005000000000L, active1, 0x10000001000001L, active2, 0x1004000800000L, active3, 0x104010L);
      case 84:
      case 116:
         if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x7800000000000L, active1, 0x7a000000000L, active2, 0x1e00000000L, active3, 0x58004L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4200001100L, active2, 0x400002000200000L, active3, 0x8L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0xf000000L, active3, 0L);
      case 87:
      case 119:
         if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 205, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60000L, active2, 0x80000000000000L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc000L, active2, 0x40020000000000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x804f0880000000L, active1, 0xc000000100000080L, active2, 0x200000000078000L, active3, 0x400L);
      case 66:
      case 98:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 10);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 10);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 165, 10);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 195, 10);
         break;
      case 67:
      case 99:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 142, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 10);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 10);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 10);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 10);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 173, 10);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 175, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x180000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 10);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 135, 10);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 10);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 139, 10);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 216, 10);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0x8000L);
      case 71:
      case 103:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 10);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 10);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 150, 10);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 187, 10);
         break;
      case 72:
      case 104:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 206, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x3fL, active3, 0xc0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 10);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 10);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 149, 10);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 10);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 186, 10);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 192, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x440000000L, active1, 0L, active2, 0L, active3, 0x800000L);
      case 77:
      case 109:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 10);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 10);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 157, 10);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 190, 10);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x1fe0000078000038L, active2, 0x1c000000000000L, active3, 0L);
      case 79:
      case 111:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8117802000000000L, active1, 0x4042000800000L, active2, 0x401e0f001000L, active3, 0x80004L);
      case 80:
      case 112:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 177, 10);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 214, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6000006L, active2, 0L, active3, 0L);
      case 81:
      case 113:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 134, 10);
         break;
      case 82:
      case 114:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 160, 10);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 10);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 193, 10);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 197, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0x10000L);
      case 84:
      case 116:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 136, 10);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x220204200000000L, active1, 0x10001001000801L, active2, 0x8001000040800000L, active3, 0x100100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L, active2, 0x2000L, active3, 0x240000L);
      case 86:
      case 118:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 10);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 10);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 10);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 184, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000060000L, active2, 0x80000000000000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8110102100000000L, active1, 0x4000000800000L, active2, 0x400000800000L, active3, 0x80000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x3fL, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 10);
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 10);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 10);
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 185, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0xe0000000000L, active1, 0L, active2, 0x70000L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L, active2, 0x180000L, active3, 0x800000L);
      case 71:
      case 103:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 10);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 10);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x8000000000L, active2, 0L, active3, 0x8100L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x480000000000000L, active1, 0L, active2, 0xf000000L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 10);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 10);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x228004000000000L, active1, 0x10000001000001L, active2, 0x1000000000000L, active3, 0x100000L);
      case 82:
      case 114:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 166, 10);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 196, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x7800000000000L, active1, 0x2000000000L, active2, 0x1e00000000L, active3, 0x40404L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x40008000000000L, active1, 0x1fe0000078000038L, active2, 0x1c000000000000L, active3, 0x200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0x100c0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200800000000L, active1, 0x1000000800L, active2, 0x9000000040000000L, active3, 0L);
      case 87:
      case 119:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 169, 10);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 182, 10);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 10);
         break;
      case 50:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 10);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0xe0000000000L, active1, 0L, active2, 0x70000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0x10100L);
      case 67:
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000200000000L, active1, 0L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 10);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 10);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 10);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 10);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 10);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 10);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 10);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 211, 10);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 10);
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 194, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0x7000000000000L, active1, 0x8000000000L, active2, 0x1c0f000000L, active3, 0x8000L);
      case 72:
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 10);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 213, 10);
         break;
      case 76:
      case 108:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 141, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0x400800000000L, active1, 0L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x3fL, active3, 0L);
      case 78:
      case 110:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 210, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x801000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L, active2, 0x1000000000180000L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x220304000000000L, active1, 0x10001001000801L, active2, 0x8001000040000000L, active3, 0x100400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L);
      case 84:
      case 116:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8100000000L, active1, 0x1fc0000070000030L, active2, 0x18000000000000L, active3, 0L);
      case 87:
      case 119:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 10);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 10);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 10);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x60000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 10);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 144, 10);
         break;
      case 49:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 10);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 10);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 145, 10);
         break;
      case 50:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 10);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 10);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 146, 10);
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x7008000000000L, active1, 0x1fc0000070000030L, active2, 0x18001c00180000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 10);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 10);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 10);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 10);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 10);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 10);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 10);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 176, 10);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 212, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0x8000L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 10);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 10);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 10);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 158, 10);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 191, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x3fL, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0xc0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000006000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x10000000000L, active2, 0L, active3, 0x10000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 10);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 10);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 10);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 118, 10);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 162, 10);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 179, 10);
         break;
      case 49:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 10);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 10);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 10);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 10);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 147, 10);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 163, 10);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 180, 10);
         break;
      case 50:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 10);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 10);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 10);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 148, 10);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 164, 10);
         break;
      case 51:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 10);
         break;
      case 52:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 122, 10);
         break;
      case 53:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 123, 10);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 103, 10);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 207, 10);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x4000000000000000L, active2, 0x800001L, active3, 0x1c0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x6L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0x10000000000L, active2, 0x8000000L, active3, 0x810000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1018L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x408000000000L, active1, 0x8000000000000000L, active2, 0x1000020L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 89:
      case 121:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 202, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3);
      return 8;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 124, 10);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 67:
      case 99:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 10);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 208, 10);
         break;
      case 68:
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 10);
         break;
      case 69:
      case 101:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 127, 10);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 129, 10);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 131, 10);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 133, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 76:
      case 108:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 140, 10);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0L);
      case 81:
      case 113:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 126, 10);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 10);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 10);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 10);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 132, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0x800000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 89:
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, active2, active3);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0L, active3, 0x100L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x2000000L, active3, 0x800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x1000000L, active3, 0L);
      case 70:
      case 102:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 151, 10);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0L, active3, 0x80L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 55, 10);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L, active2, 0x100000000c000000L, active3, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, active2, active3);
      return 10;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0L, active3, 0x40L);
      case 72:
      case 104:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 46, 10);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 215, 10);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x6000000L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 10);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x1000000L, active3, 0x100L);
      case 84:
      case 116:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 199, 10);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x8000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, 0L, active2, active3);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active2, 0xa000000L, active3, 0L);
      case 67:
      case 99:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 154, 10);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active2, 0x1000000L, active3, 0L);
      case 72:
      case 104:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 188, 10);
         break;
      case 82:
      case 114:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(11, 198, 10);
         return jjMoveStringLiteralDfa12_0(active2, 0L, active3, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa12_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, 0L, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, 0L, active2, active3);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active2, 0x1000000L, active3, 0x100L);
      case 76:
      case 108:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 153, 10);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(12, 155, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa13_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, 0L, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, active2, active3);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active2, 0x1000000L, active3, 0L);
      case 89:
      case 121:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(13, 200, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa14_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(14, 152, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 218)
                        kind = 218;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(12);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 1:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 3:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 4:
                  if (curChar == 34 && kind > 219)
                     kind = 219;
                  break;
               case 5:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 7:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if (curChar == 35)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 218)
                     kind = 218;
                  jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 218)
                     kind = 218;
                  jjCheckNAdd(17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(10);
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 2:
                  if (curChar == 92)
                     jjAddStates(10, 12);
                  break;
               case 3:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   14, 15, 17, 1, 2, 4, 1, 2, 6, 4, 3, 5, 7, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", 
"\135", "\73", "\54", "\56", "\75", "\76", "\74", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\53", "\55", "\52", "\57", "\45", "\52\52", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x9fffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[18];
private final int[] jjstateSet = new int[36];
protected char curChar;
/** Constructor. */
public ASMParseTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ASMParseTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 18; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
